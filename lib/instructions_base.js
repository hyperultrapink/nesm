// NESM - NEATEST EXECUTABLE SUPPLY MACHINE
// Base 6502 Instruction Set
// COPYRIGHT (c) HYPER ULTRA PINK 2022

import { Instruction } from "./shared.js";

// base opcode table
// prettier-ignore
export const base_instruction_set = {
  "ADC":              new Instruction("ADC",              "class4",         "0x61",         "0",           "IMM|ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "AND":              new Instruction("AND",              "class4",         "0x21",         "0",           "IMM|ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "ASL":              new Instruction("ASL",              "class4",         "0x02",         "0",           "ACC|ZP|ZP_X|ABS|ABS_X"),
  "BCC":              new Instruction("BCC",              "class2",         "0x90",         "0",           "0"),
  "BCS":              new Instruction("BCS",              "class2",         "0xB0",         "0",           "0"),
  "BEQ":              new Instruction("BEQ",              "class2",         "0xF0",         "0",           "0"),
  "BIT":              new Instruction("BIT",              "class4",         "0x00",         "2",           "IMM|ZP|ZP_X|ABS|ABS_X"),
  "BMI":              new Instruction("BMI",              "class2",         "0x30",         "0",           "0"),
  "BNE":              new Instruction("BNE",              "class2",         "0xD0",         "0",           "0"),
  "BPL":              new Instruction("BPL",              "class2",         "0x10",         "0",           "0"),
  "BRK":              new Instruction("BRK",              "class1",         "0x00",         "0",           "0"),
  "BVC":              new Instruction("BVC",              "class2",         "0x50",         "0",           "0"),
  "BVS":              new Instruction("BVS",              "class2",         "0x70",         "0",           "0"),
  "CLC":              new Instruction("CLC",              "class1",         "0x18",         "0",           "0"),
  "CLD":              new Instruction("CLD",              "class1",         "0xD8",         "0",           "0"),
  "CLI":              new Instruction("CLI",              "class1",         "0x58",         "0",           "0"),
  "CLV":              new Instruction("CLV",              "class1",         "0xB8",         "0",           "0"),
  "CMP":              new Instruction("CMP",              "class4",         "0xC1",         "0",           "IMM|ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "CPX":              new Instruction("CPX",              "class4",         "0xE0",         "1",           "IMM|ZP|ABS"),
  "CPY":              new Instruction("CPY",              "class4",         "0xC0",         "1",           "IMM|ZP|ABS"),
  "DEC":              new Instruction("DEC",              "class4",         "0x00",         "3",           "ACC|ZP|ZP_X|ABS|ABS_X"),
  "DEX":              new Instruction("DEX",              "class1",         "0xCA",         "0",           "0"),
  "DEY":              new Instruction("DEY",              "class1",         "0x88",         "0",           "0"),
  "EOR":              new Instruction("EOR",              "class4",         "0x41",         "0",           "IMM|ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "INC":              new Instruction("INC",              "class4",         "0x00",         "4",           "ACC|ZP|ZP_X|ABS|ABS_X"),
  "INX":              new Instruction("INX",              "class1",         "0xE8",         "0",           "0"),
  "INY":              new Instruction("INY",              "class1",         "0xC8",         "0",           "0"),
  "JMP":              new Instruction("JMP",              "class4",         "0x40",         "0",           "ABS|ABS_IND|ABS_IND_X"),
  "JSR":              new Instruction("JSR",              "class4",         "0x14",         "0",           "ABS"),
  "LDA":              new Instruction("LDA",              "class4",         "0xA1",         "0",           "IMM|ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "LDX":              new Instruction("LDX",              "class4",         "0xA2",         "1",           "IMM|ZP|ZP_Y|ABS|ABS_Y"),
  "LDY":              new Instruction("LDY",              "class4",         "0xA0",         "1",           "IMM|ZP|ZP_X|ABS|ABS_X"),
  "LSR":              new Instruction("LSR",              "class4",         "0x42",         "0",           "ACC|ZP|ZP_X|ABS|ABS_X"),
  "NOP":              new Instruction("NOP",              "class1",         "0xEA",         "0",           "0"),
  "ORA":              new Instruction("ORA",              "class4",         "0x01",         "0",           "IMM|ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "PHA":              new Instruction("PHA",              "class1",         "0x48",         "0",           "0"),
  "PHP":              new Instruction("PHP",              "class1",         "0x08",         "0",           "0"),
  "PLA":              new Instruction("PLA",              "class1",         "0x68",         "0",           "0"),
  "PLP":              new Instruction("PLP",              "class1",         "0x28",         "0",           "0"),
  "ROL":              new Instruction("ROL",              "class4",         "0x22",         "0",           "ACC|ZP|ZP_X|ABS|ABS_X"),
  "ROR":              new Instruction("ROR",              "class4",         "0x62",         "0",           "ACC|ZP|ZP_X|ABS|ABS_X"),
  "RTI":              new Instruction("RTI",              "class1",         "0x40",         "0",           "0"),
  "RTS":              new Instruction("RTS",              "class1",         "0x60",         "0",           "0"),
  "SBC":              new Instruction("SBC",              "class4",         "0xE1",         "0",           "IMM|ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "SEC":              new Instruction("SEC",              "class1",         "0x38",         "0",           "0"),
  "SED":              new Instruction("SED",              "class1",         "0xF8",         "0",           "0"),
  "SEI":              new Instruction("SEI",              "class1",         "0x78",         "0",           "0"),
  "STA":              new Instruction("STA",              "class4",         "0x81",         "0",           "ZP|ZP_X|ZP_IND_X|ZP_IND_Y|ABS|ABS_X|ABS_Y"),
  "STX":              new Instruction("STX",              "class4",         "0x82",         "0",           "ZP|ZP_Y|ABS"),
  "STY":              new Instruction("STY",              "class4",         "0x80",         "0",           "ZP|ZP_X|ABS"),
  "TAX":              new Instruction("TAX",              "class1",         "0xAA",         "0",           "0"),
  "TAY":              new Instruction("TAY",              "class1",         "0xA8",         "0",           "0"),
  "TSX":              new Instruction("TSX",              "class1",         "0xBA",         "0",           "0"),
  "TXA":              new Instruction("TXA",              "class1",         "0x8A",         "0",           "0"),
  "TXS":              new Instruction("TXS",              "class1",         "0x9A",         "0",           "0"),
  "TYA":              new Instruction("TYA",              "class1",         "0x98",         "0",           "0"),
  "NULL":             new Instruction("NULL",             "NULL",           "0",            "0",           "0"),
};

// pseudo opcode table
// prettier-ignore
export const pseudo_instruction_set = {
  "=":                new Instruction("=",                "do_equ",         "P_EQU",        "0",           "PSEUDO"),
  ".BANK":            new Instruction(".BANK",            "do_bank",        "P_BANK",       "0",           "PSEUDO"),
  ".BSS":             new Instruction(".BSS",             "do_section",     "P_BSS",        "S_BSS",       "PSEUDO"),
  ".BYTE":            new Instruction(".BYTE",            "do_db",          "P_DB",         "0",           "PSEUDO"),
  ".CODE":            new Instruction(".CODE",            "do_section",     "P_CODE",       "S_CODE",      "PSEUDO"),
  ".DATA":            new Instruction(".DATA",            "do_section",     "P_DATA",       "S_DATA",      "PSEUDO"),
  ".DB":              new Instruction(".DB",              "do_db",          "P_DB",         "0",           "PSEUDO"),
  ".DW":              new Instruction(".DW",              "do_dw",          "P_DW",         "0",           "PSEUDO"),
  ".DS":              new Instruction(".DS",              "do_ds",          "P_DS",         "0",           "PSEUDO"),
  ".ELSE":            new Instruction(".ELSE",            "do_else",        "P_ELSE",       "0",           "PSEUDO"),
  ".ENDIF":           new Instruction(".ENDIF",           "do_endif",       "P_ENDIF",      "0",           "PSEUDO"),
  ".ENDM":            new Instruction(".ENDM",            "do_endm",        "P_ENDM",       "0",           "PSEUDO"),
  ".ENDP":            new Instruction(".ENDP",            "do_endp",        "P_ENDP",       "P_PROC",      "PSEUDO"),
  ".ENDPROCGROUP":    new Instruction(".ENDPROCGROUP",    "do_endp",        "P_ENDPG",      "P_PGROUP",    "PSEUDO"),
  ".EQU":             new Instruction(".EQU",             "do_equ",         "P_EQU",        "0",           "PSEUDO"),
  ".FAIL":            new Instruction(".FAIL",            "do_fail",        "P_FAIL",       "0",           "PSEUDO"),
  ".FUNC":            new Instruction(".FUNC",            "do_func",        "P_FUNC",       "0",           "PSEUDO"),
  ".IF":              new Instruction(".IF",              "do_if",          "P_IF",         "0",           "PSEUDO"),
  ".IFDEF":           new Instruction(".IFDEF",           "do_ifdef",       "P_IFDEF",      "1",           "PSEUDO"),
  ".IFNDEF":          new Instruction(".IFNDEF",          "do_ifdef",       "P_IFNDEF",     "0",           "PSEUDO"),
  ".INCBIN":          new Instruction(".INCBIN",          "do_incbin",      "P_INCBIN",     "0",           "PSEUDO"),
  ".INCLUDE":         new Instruction(".INCLUDE",         "do_include",     "P_INCLUDE",    "0",           "PSEUDO"),
  ".INCCHR":          new Instruction(".INCCHR",          "do_incchr",      "P_INCCHR",     "0xEA",        "PSEUDO"),
  ".LIST":            new Instruction(".LIST",            "do_list",        "P_LIST",       "0",           "PSEUDO"),
  ".MAC":             new Instruction(".MAC",             "do_macro",       "P_MACRO",      "0",           "PSEUDO"),
  ".MACRO":           new Instruction(".MACRO",           "do_macro",       "P_MACRO",      "0",           "PSEUDO"),
  ".MLIST":           new Instruction(".MLIST",           "do_mlist",       "P_MLIST",      "0",           "PSEUDO"),
  ".NOLIST":          new Instruction(".NOLIST",          "do_nolist",      "P_NOLIST",     "0",           "PSEUDO"),
  ".NOMLIST":         new Instruction(".NOMLIST",         "do_nomlist",     "P_NOMLIST",    "0",           "PSEUDO"),
  ".OPT":             new Instruction(".OPT",             "do_opt",         "P_OPT",        "0",           "PSEUDO"),
  ".ORG":             new Instruction(".ORG",             "do_org",         "P_ORG",        "0",           "PSEUDO"),
  ".PAGE":            new Instruction(".PAGE",            "do_page",        "P_PAGE",       "0",           "PSEUDO"),
  ".PROC":            new Instruction(".PROC",            "do_proc",        "P_PROC",       "P_PROC",      "PSEUDO"),
  ".PROCGROUP":       new Instruction(".PROCGROUP",       "do_proc",        "P_PGROUP",     "P_PGROUP",    "PSEUDO"),
  ".RSSET":           new Instruction(".RSSET",           "do_rsset",       "P_RSSET",      "0",           "PSEUDO"),
  ".RS":              new Instruction(".RS",              "do_rs",          "P_RS",         "0",           "PSEUDO"),
  ".WORD":            new Instruction(".WORD",            "do_dw",          "P_DW",         "0",           "PSEUDO"),
  ".ZP":              new Instruction(".ZP",              "do_section",     "P_ZP",         "S_ZP",        "PSEUDO"),
  "BANK":             new Instruction("BANK",             "do_bank",        "P_BANK",       "0",           "PSEUDO"),
  "BSS":              new Instruction("BSS",              "do_section",     "P_BSS",        "S_BSS",       "PSEUDO"),
  "BYTE":             new Instruction("BYTE",             "do_db",          "P_DB",         "0",           "PSEUDO"),
  "CALL":             new Instruction("CALL",             "do_call",        "P_CALL",       "0",           "PSEUDO"),
  "CODE":             new Instruction("CODE",             "do_section",     "P_CODE",       "S_CODE",      "PSEUDO"),
  "DATA":             new Instruction("DATA",             "do_section",     "P_DATA",       "S_DATA",      "PSEUDO"),
  "DB":               new Instruction("DB",               "do_db",          "P_DB",         "0",           "PSEUDO"),
  "DW":               new Instruction("DW",               "do_dw",          "P_DW",         "0",           "PSEUDO"),
  "DS":               new Instruction("DS",               "do_ds",          "P_DS",         "0",           "PSEUDO"),
  "ELSE":             new Instruction("ELSE",             "do_else",        "P_ELSE",       "0",           "PSEUDO"),
  "ENDIF":            new Instruction("ENDIF",            "do_endif",       "P_ENDIF",      "0",           "PSEUDO"),
  "ENDM":             new Instruction("ENDM",             "do_endm",        "P_ENDM",       "0",           "PSEUDO"),
  "ENDP":             new Instruction("ENDP",             "do_endp",        "P_ENDP",       "P_PROC",      "PSEUDO"),
  "ENDPROCGROUP":     new Instruction("ENDPROCGROUP",     "do_endp",        "P_ENDPG",      "P_PGROUP",    "PSEUDO"),
  "EQU":              new Instruction("EQU",              "do_equ",         "P_EQU",        "0",           "PSEUDO"),
  "FAIL":             new Instruction("FAIL",             "do_fail",        "P_FAIL",       "0",           "PSEUDO"),
  "FUNC":             new Instruction("FUNC",             "do_func",        "P_FUNC",       "0",           "PSEUDO"),
  "IF":               new Instruction("IF",               "do_if",          "P_IF",         "0",           "PSEUDO"),
  "IFDEF":            new Instruction("IFDEF",            "do_ifdef",       "P_IFDEF",      "1",           "PSEUDO"),
  "IFNDEF":           new Instruction("IFNDEF",           "do_ifdef",       "P_IFNDEF",     "0",           "PSEUDO"),
  "INCBIN":           new Instruction("INCBIN",           "do_incbin",      "P_INCBIN",     "0",           "PSEUDO"),
  "INCLUDE":          new Instruction("INCLUDE",          "do_include",     "P_INCLUDE",    "0",           "PSEUDO"),
  "INCCHR":           new Instruction("INCCHR",           "do_incchr",      "P_INCCHR",     "0xEA",        "PSEUDO"),
  "LIST":             new Instruction("LIST",             "do_list",        "P_LIST",       "0",           "PSEUDO"),
  "MAC":              new Instruction("MAC",              "do_macro",       "P_MACRO",      "0",           "PSEUDO"),
  "MACRO":            new Instruction("MACRO",            "do_macro",       "P_MACRO",      "0",           "PSEUDO"),
  "MLIST":            new Instruction("MLIST",            "do_mlist",       "P_MLIST",      "0",           "PSEUDO"),
  "NOLIST":           new Instruction("NOLIST",           "do_nolist",      "P_NOLIST",     "0",           "PSEUDO"),
  "NOMLIST":          new Instruction("NOMLIST",          "do_nomlist",     "P_NOMLIST",    "0",           "PSEUDO"),
  "OPT":              new Instruction("OPT",              "do_opt",         "P_OPT",        "0",           "PSEUDO"),
  "ORG":              new Instruction("ORG",              "do_org",         "P_ORG",        "0",           "PSEUDO"),
  "PAGE":             new Instruction("PAGE",             "do_page",        "P_PAGE",       "0",           "PSEUDO"),
  "PROC":             new Instruction("PROC",             "do_proc",        "P_PROC",       "P_PROC",      "PSEUDO"),
  "PROCGROUP":        new Instruction("PROCGROUP",        "do_proc",        "P_PGROUP",     "P_PGROUP",    "PSEUDO"),
  "RSSET":            new Instruction("RSSET",            "do_rsset",       "P_RSSET",      "0",           "PSEUDO"),
  "RS":               new Instruction("RS",               "do_rs",          "P_RS",         "0",           "PSEUDO"),
  "WORD":             new Instruction("WORD",             "do_dw",          "P_DW",         "0",           "PSEUDO"),
  "ZP":               new Instruction("ZP",               "do_section",     "P_ZP",         "S_ZP",        "PSEUDO"),
  "NULL":             new Instruction("NULL",             "NULL",           "0",            "0",           "0"),
};
